// require("dotenv").config();
// const axios = require("axios");

// module.exports = async function handleWooOrder(order, wooProductMap) {
//   // Ensure order exists and is structured correctly
//   if (!order || !order.id || !order.line_items) {
//     console.error("‚ùå Invalid order structure", order);
//     return;
//   }

//   // Iterate through each line item (product) in the WooCommerce order
//   for (const item of order.line_items) {
//     const quantity = item.quantity; // The quantity of the product ordered
//     const meta = item.meta_data || [];  // Meta data associated with the item

//     // Find the shopify_product_id from WooCommerce metadata
//     const shopifyMeta = meta.find(m => m.key === "shopify_product_id");
//     const shopifyProductId = shopifyMeta ? shopifyMeta.value : null;

//     if (!shopifyProductId) {
//       console.warn(`‚ö†Ô∏è No Shopify Product ID found for item: ${item.name}`);
//       continue; // Skip to the next item if no Shopify Product ID
//     }

//     try {
//       // Step 1: Fetch the corresponding Shopify product's variant information
//       const variantRes = await axios.get(
//         `https://${process.env.SHOPIFY_STORE_URL}/admin/api/2024-01/products/${shopifyProductId}/variants.json`,
//         {
//           headers: {
//             "X-Shopify-Access-Token": process.env.SHOPIFY_ACCESS_TOKEN,
//             "Content-Type": "application/json"
//           }
//         }
//       );

//       const variants = variantRes.data.variants;
//       if (!variants || variants.length === 0) {
//         console.error("‚ùå No variants found for this product.");
//         continue;  // Skip if no variants are found
//       }

//       const inventoryItemId = variants[0].inventory_item_id;
//       console.log(`‚û°Ô∏è Found Inventory Item ID: ${inventoryItemId}`);

//       // Step 2: Adjust inventory levels in Shopify
//       const adjustEndpoint = `https://${process.env.SHOPIFY_STORE_URL}/admin/api/2024-01/inventory_levels/adjust.json`;
//       const payload = {
//         location_id: process.env.SHOPIFY_LOCATION_ID,  // Your Shopify location ID
//         inventory_item_id: inventoryItemId,
//         available_adjustment: -quantity  // Reduce stock based on order quantity
//       };

//       // Make the API call to adjust the inventory
//       await axios.post(adjustEndpoint, payload, {
//         headers: {
//           "X-Shopify-Access-Token": process.env.SHOPIFY_ACCESS_TOKEN,
//           "Content-Type": "application/json"
//         }
//       });

//       console.log(`‚úÖ Inventory updated for product ${shopifyProductId} | Adjusted  by -${quantity}`);
//     } catch (err) {
//       console.error("‚ùå Error processing product:", err.response?.data || err.message);
//     }
//   }
  
//   console.log(`‚úÖ WooCommerce Order Processed: ${order.id}`);
// };


/// -------------------------------------------------------------------------------------------------------------------------

// // woo-to-shopify.js
// // Handles WooCommerce ‚Üí Shopify order webhooks by adjusting Shopify inventory
// require("dotenv").config();
// const axios = require("axios");
// const { lastUpdatedStock } = require("./sync-cache");

// module.exports = async function handleWooOrder(order) {
//   if (!order || !order.id || !Array.isArray(order.line_items)) {
//     console.error("‚ùå Invalid Woo order payload");
//     return;
//   }

//   for (const item of order.line_items) {
//     const qty = item.quantity;
//     const meta = item.meta_data || [];
//     const shopifyMeta = meta.find(m => m.key === "shopify_product_id");
//     const productId = shopifyMeta ? String(shopifyMeta.value) : null;
//     if (!productId) {
//       console.warn(`‚ö†Ô∏è No Shopify ID for Woo item ${item.name}`);
//       continue;
//     }

//     try {
//       // Get variant to find inventory_item_id
//       const varRes = await axios.get(
//         `https://${process.env.SHOPIFY_STORE_DOMAIN}/admin/api/2024-01/products/${productId}/variants.json`,
//         { headers: { "X-Shopify-Access-Token": process.env.SHOPIFY_ADMIN_API_ACCESS_TOKEN } }
//       );
//       const variant = varRes.data.variants?.[0];
//       if (!variant) {
//         console.error(`‚ùå No Shopify variant for product ${productId}`);
//         continue;
//       }

//       const invItemId = variant.inventory_item_id;
//       const currentQty = variant.inventory_quantity || 0;
//       const expectedQty = currentQty - qty;
//       lastUpdatedStock.set(productId, expectedQty);

//       // Adjust inventory
//       await axios.post(
//         `https://${process.env.SHOPIFY_STORE_DOMAIN}/admin/api/2024-01/inventory_levels/adjust.json`,
//         {
//           location_id: process.env.SHOPIFY_LOCATION_ID,
//           inventory_item_id: invItemId,
//           available_adjustment: -qty
//         },
//         { headers: { "X-Shopify-Access-Token": process.env.SHOPIFY_ADMIN_API_ACCESS_TOKEN } }
//       );

//       console.log(`‚úÖ Shopify stock adjusted for ${productId} by -${qty}`);
//     } catch (err) {
//       console.error("‚ùå Error syncing to Shopify:", err.response?.data || err.message);
//     }
//   }

//   console.log(`‚úÖ Processed Woo Order ${order.id}`);
// };

//-----------------ABOVE CODE IS WORKING FOR MANUAL UPATE -----------------------


// woo-to-shopify.js
// Exports two handlers: orders‚ÜíShopify and inventory-levels‚ÜíWooCommerce

require("dotenv").config();
const axios = require("axios");
const { updateWooCommerceInventory } = require("./woocommerce-api");
const { lastUpdatedStock } = require("./sync-cache");

/**
 * 1Ô∏è‚É£ WooCommerce order ‚Üí Shopify inventory adjust
 */
module.exports.handleWooOrder = async function(order) {
  if (!order?.id || !Array.isArray(order.line_items)) {
    console.error("‚ùå Invalid Woo order payload");
    return;
  }

  for (const item of order.line_items) {
    const qty = item.quantity;
    const meta = item.meta_data || [];
    const shopifyMeta = meta.find(m => m.key === "shopify_product_id");
    const productId = shopifyMeta?.value && String(shopifyMeta.value);
    if (!productId) {
      console.warn(`‚ö†Ô∏è No Shopify ID for Woo item ${item.name}`);
      continue;
    }

    try {
      // fetch variant ‚Üí inventory_item_id + current qty
      const { data } = await axios.get(
        `https://${process.env.SHOPIFY_STORE_DOMAIN}/admin/api/2024-01/products/${productId}/variants.json`,
        { headers: { "X-Shopify-Access-Token": process.env.SHOPIFY_ADMIN_API_ACCESS_TOKEN } }
      );
      const variant = data.variants?.[0];
      if (!variant) {
        console.error(`‚ùå No Shopify variant for product ${productId}`);
        continue;
      }

      const invItemId = variant.inventory_item_id;
      const curr = variant.inventory_quantity ?? 0;
      const expected = curr - qty;
      // pre-seed cache so our own adjust doesn‚Äôt loop back
      lastUpdatedStock.set(productId, expected);

      // call inventory_levels/adjust
      await axios.post(
        `https://${process.env.SHOPIFY_STORE_DOMAIN}/admin/api/2024-01/inventory_levels/adjust.json`,
        {
          location_id: process.env.SHOPIFY_LOCATION_ID,
          inventory_item_id: invItemId,
          available_adjustment: -qty
        },
        { headers: { "X-Shopify-Access-Token": process.env.SHOPIFY_ADMIN_API_ACCESS_TOKEN } }
      );

      console.log(`‚úÖ Shopify stock adjusted (${productId}) by -${qty}`);
    } catch (err) {
      console.error("‚ùå Error syncing to Shopify:", err.response?.data || err.message);
    }
  }

  console.log(`‚úÖ Woo order processed: ${order.id}`);
};

/**
 * 2Ô∏è‚É£ Inventory Level webhook ‚Üí WooCommerce stock update
 */
module.exports.handleShopifyInventoryWebhook = async function(inventory_item_id, available) {
  try {
    // find variant ‚Üí get variant ID
    const url = `https://${process.env.SHOPIFY_STORE_DOMAIN}/admin/api/2024-01/variants.json`;
    const { data } = await axios.get(url, {
      headers: { "X-Shopify-Access-Token": process.env.SHOPIFY_ADMIN_API_ACCESS_TOKEN },
      params: { inventory_item_ids: inventory_item_id }
    });

    const variant = data.variants?.[0];
    if (!variant) {
      console.error("‚ùå No Shopify variant for inventory_item_id", inventory_item_id);
      return;
    }

    const variantId = variant.id;
    console.log(`üîÑ Shopify variant ${variantId} ‚Üí available ${available}`);

    // forward to WooCommerce
    await updateWooCommerceInventory(variantId, available);
  } catch (err) {
    console.error("‚ùå Failed to handle inventory-level webhook:", err.message);
  }
};
